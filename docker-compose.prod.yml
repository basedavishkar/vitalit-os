version: '3.8'

services:
  # PostgreSQL Database with optimized configuration
  db:
    image: postgres:16-alpine
    container_name: vitalit_db
    environment:
      POSTGRES_DB: ${DB_NAME:-vitalit}
      POSTGRES_USER: ${DB_USER:-vitalit}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg_backups:/backups
      - ./pg_init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-vitalit}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - vitalit_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: vitalit_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    networks:
      - vitalit_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production
    container_name: vitalit_backend
    environment:
      # Database
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-vitalit}
      - DB_USER=${DB_USER:-vitalit}
      - DB_PASSWORD=${DB_PASSWORD}
      - DATABASE_URL=postgresql://${DB_USER:-vitalit}:${DB_PASSWORD}@db:5432/${DB_NAME:-vitalit}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # Security
      - TOKEN_SECRET_KEY=${TOKEN_SECRET_KEY}
      - REFRESH_TOKEN_SECRET_KEY=${REFRESH_TOKEN_SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=30
      # Email
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      # Payments
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      # Application
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
    volumes:
      - ./uploads:/app/uploads:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
      - ./certs:/app/certs:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - vitalit_net
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: vitalit_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
      - ./frontend/.next:/usr/share/nginx/html/_next:ro
      - ./frontend/public:/usr/share/nginx/html:ro
      - ./uploads:/usr/share/nginx/html/uploads:ro
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - backend
    networks:
      - vitalit_net
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local


  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: vitalit_backup
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      - postgres
    command: ["sh", "/backup.sh"]
    restart: "no"



networks:
  default:
    name: vitalit_network 